# ansible-playbook pb_controller_cac.yml --tags credentials
---
controller_credentials:
- name: GPG Public Key (zleblanc@redhat.com)
  organization: Autodotes
  description: GPG public key associated with project signing
  credential_type: GPG Public Key 
  inputs:
    gpg_public_key: "{{ controller_credential_gpg_pubkey }}"
- name: AAP (awx)
  organization: Autodotes
  description: SSH credential for connecting as awx user
  credential_type: Machine 
  inputs:
    become_method: ''
    become_username: ''
    ssh_key_data: "{{ controller_credential_ansible_ssh_key }}"
    username: awx
- name: AAP (cloud-user)
  organization: Autodotes
  description: SSH credential for connecting as cloud-user user
  credential_type: Machine 
  inputs:
    become_method: ''
    become_username: ''
    ssh_key_data: "{{ controller_credential_ansible_ssh_key }}"
    username: cloud-user
- name: AAP (id_rsa)
  organization: Autodotes
  description: SSH credential for connecting as zach user
  credential_type: Machine 
  inputs:
    become_method: ''
    become_username: ''
    ssh_key_data: "{{ controller_credential_ansible_ssh_key }}"
    username: zach
- name: AAP (zach)
  organization: Autodotes
  description: SSH credential for connecting as zach user
  credential_type: Machine 
  inputs:
    become_method: ''
    become_username: ''
    ssh_key_data: "{{ controller_credential_ansible_ssh_key }}"
    username: zach
- name: Router
  organization: Autodotes
  description: SSH credential for connecting as zach user
  credential_type: Machine 
  inputs:
    become_method: ''
    become_username: ''
    password: "{{ controller_credential_router_ssh_password }}"
    username: zach
- name: AAP (root)
  description: SSH credential for connecting as root user
  organization: Autodotes 
  credential_type: Machine 
  inputs:
    become_method: ''
    become_username: ''
    ssh_key_data: "{{ controller_credential_ansible_ssh_key }}"
    username: root
- name: Ansible Service Account (Minimal Sub)
  description: ansible-sa in zjleblanc3@gmail.com Azure Minimal Sub
  organization: Autodotes
  credential_type: Microsoft Azure Resource Manager 
  inputs:
    client: "{{ controller_credential_azure_client }}"
    cloud_environment: ''
    secret: "{{ controller_credential_azure_secret }}"
    subscription: "{{ controller_credential_azure_subscription }}"
    tenant: "{{ controller_credential_azure_tenant }}"
    username: ''
- name: Ansible Vault
  organization: Autodotes 
  description: decrypt vaulted secret files
  credential_type: Vault 
  inputs:
    vault_password: "{{ controller_credential_ansible_vault_password }}"
- name: Autodotes AD LDAP Credential
  organization: Autodotes
  description: connect to Autodotes Active Directory domain controller
  credential_type: MSFT AD LDAP Demo 
  inputs:
    ldap_ca_cert: ''
    ldap_cert_validation: ignore
    ldap_certificate: ''
    ldap_certificate_key: ''
    ldap_password: "{{ controller_credential_domain_controller_password }}"
    ldap_port: '389'
    ldap_server: 192.168.0.66
    ldap_username: zach@autodotes.local
- name: Autodotes Automation Hub Credential
  organization: Default
  description: autodotes private automation hub credential
  credential_type: Ansible Galaxy/Automation Hub API Token 
  inputs:
    auth_url: ''
    token: REPLACE_ME
    url: https://automation-hub.autodotes.com
- name: Autodotes[com] Admin
  organization: Autodotes
  description: Autodotes Active Directory domain administrator
  credential_type: Windows Domain Administrator 
  inputs:
    admin_account: Administrator
    admin_password: "{{ controller_credential_windows_domain_admin_password }}"
    domain: autodotes.com
- name: Autodotes[local] Admin
  organization: Autodotes
  description: autodotes.local domain admin account
  credential_type: Windows Domain Administrator 
  inputs:
    admin_account: zach
    admin_password: "{{ controller_credential_windows_domain_zach_password }}"
    domain: autodotes.local
- name: Automation Hub
  organization: Default
  description: Red Hat certified content
  credential_type: Ansible Galaxy/Automation Hub API Token 
  inputs:
    auth_url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
    token: REPLACE_ME
    url: https://console.redhat.com/api/automation-hub/content/published/
- name: Automation Hub Community Repository
  organization: Autodotes
  description: Private Automation Hub community repository
  credential_type: Ansible Galaxy/Automation Hub API Token 
  inputs:
    auth_url: ''
    token: REPLACE_ME
    url: https://automation-hub.autodotes.com/api/galaxy/content/community/
- name: Automation Hub Container Registry
  organization: Autodotes
  description: Private Automation Hub container registry
  credential_type: Container Registry 
  inputs:
    host: automation-hub.autodotes.com
    password: "{{ controller_credential_container_registry_pah }}"
    username: admin
    verify_ssl: true
- name: Automation Hub Published Repository
  organization: Autodotes
  description: Private Automation Hub published repository
  credential_type:
    kind: galaxy
    name: Ansible Galaxy/Automation Hub API Token
    type: credential_type
  inputs:
    auth_url: ''
    token: REPLACE_ME
    url: https://automation-hub.autodotes.com/api/galaxy/content/published/
- name: Automation Hub RH Certified Repository
  organization: Autodotes
  description: Private Automation Hub certified repository
  credential_type: Ansible Galaxy/Automation Hub API Token 
  inputs:
    auth_url: ''
    token: REPLACE_ME
    url: https://automation-hub.autodotes.com/api/galaxy/content/rh-certified/
- name: Automation Hub Validated Repository
  organization: Autodotes
  description: Private Automation Hub validated repository
  credential_type: Ansible Galaxy/Automation Hub API Token 
  inputs:
    auth_url: ''
    token: REPLACE_ME
    url: https://automation-hub.autodotes.com/api/galaxy/content/validated/
- name: AWS (ec2-user)
  organization: Autodotes
  description: SSH credential for connecting as ec2-user user
  credential_type: Machine
  inputs:
    become_method: ''
    become_username: ''
    ssh_key_data: "{{ controller_credential_ansible_ssh_key }}"
    username: ec2-user
    password: "{{ controller_credential_ec2_password }}"
- name: AWS Sandbox Credential
  organization: Autodotes
  description: AWS access/secret key combo
  credential_type: Amazon Web Services 
  inputs:
    username: "{{ controller_credential_aws_access_key_id }}"
    password: "{{ controller_credential_aws_secret_key }}"
- name: Azure Key Vault Connection
  organization: Autodotes
  description: integration with azure key vault
  credential_type: Microsoft Azure Key Vault 
  inputs:
    client: "{{ controller_credential_azure_client }}"
    cloud_name: AzureCloud
    secret: "{{ controller_credential_azure_secret }}"
    tenant: "{{ controller_credential_azure_tenant }}"
    url: https://zleblanc-ansible-kv.vault.azure.net
- name: BitBucket (zleblancssa)
  organization: Autodotes
  credential_type: Source Control 
  description: sync repositories from BitBucket
  inputs:
    ssh_key_data: "{{ controller_credential_ansible_ssh_key }}"
    username: zleblancssa
- name: Camper Vault
  organization: Autodotes
  description: decrypt vaulted password file
  credential_type: Vault 
  inputs:
    vault_id: ''
    vault_password: "{{ controller_credential_camper_vault_password }}"
- name: Cisco (ios) Credential
  organization: Autodotes 
  credential_type: Machine 
  description: ''
  inputs:
    become_method: enable
    become_password: REPLACE_ME
    become_username: ''
    password: REPLACE_ME
    username: cisco
- name: Cloudflare DNS
  organization: Autodotes
  credential_type: Cloudflare Token
  description: used to manage Cloudflare DNS records
  inputs:
    cloudflare_token: "{{ controller_credential_cloudflare_token }}"
- name: Conjur Credential
  organization: Autodotes 
  credential_type: CyberArk Conjur Secrets Manager Lookup 
  description: used to lookup secrets from CyberArk Conjur
  inputs:
    url: https://proxy:8443
    username: host/BotApp/Controller
    account: myConjurAccount
    api_key: REPLACE_ME
    cacert: REPLACE_ME
- name: Controller Credential
  organization: Default 
  credential_type: Red Hat Ansible Automation Platform 
  description: used to integrate with the controller API
  inputs:
    host: https://ansible.autodotes.com
    oauth_token: "{{ controller_credential_aap25_token }}"
    username: ''
    verify_ssl: false
- name: CyberArk Conjur Client (Controller)
  organization: Autodotes
  credential_type: CyberArk Conjur Client 
  description: used to lookup secrets from CyberArk Conjur
  inputs:
    conjur_appliance_url: https://proxy:8443
    conjur_login: host/BotApp/Controller
    conjur_account: myConjurAccount
    conjur_api_key: REPLACE_ME
    conjur_cert_file: REPLACE_ME
- name: CyberArk Conjur Secret - Ansible
  organization: Autodotes 
  credential_type: Demo CyberArk Conjur Secret 
  description: Used as conjur_secret
  inputs: {}
- name: Daily Demo [Autodotes]
  organization: Autodotes
  credential_type: Daily Demo Credential 
  description: used for daily demo
  inputs:
    controller_passwd: REPLACE_ME
    customer_portal_passwd: REPLACE_ME
- name: Daily Demo Vault Password
  organization: Autodotes 
  credential_type: Vault 
  description: decrypt vaulted password file for daily demo
  inputs:
    vault_id: ''
    vault_password: REPLACE_ME
- name: Demo SQL Service Account Credentials
  organization: Autodotes 
  credential_type: SQL Server Service Accounts 
  description: used for deploy mssql and configuring service accounts
  inputs:
    mssql_agentsvc_account: AUTODOTES\sql_agt
    mssql_agentsvc_account_pass: "{{ controller_credential_mssql_agentsvc_account_pass }}"
    mssql_assvc_account: AUTODOTES\sql_svc
    mssql_assvc_account_pass: "{{ controller_credential_mssql_assvc_account_pass }}"
    mssql_sqlsvc_account: AUTODOTES\sql_svc
    mssql_sqlsvc_account_pass: "{{ controller_credential_mssql_sqlsvc_account_pass }}"
- name: Demo Vault
  organization: Autodotes
  credential_type: Vault 
  description: decrypt vaulted password file for demo
  inputs:
    vault_password: "{{ controller_credential_ansible_vault_password }}"
- name: Dynatrace Demo Credential
  organization: Autodotes
  credential_type: Dynatrace
  description: integrate with Dynatrace API
  inputs:
    dynatrace_api_token: "{{ controller_credential_dynatrace_api_token }}"
    dynatrace_client_id: ''
    dynatrace_host: https://ozi92582.live.dynatrace.com
- name: "EE Utilities (Destination: PAH)"
  organization: Autodotes
  credential_type: EE Utilities 
  description: used to build execution environments and publish to quay
  inputs:
    ee_base_reg_user: zleblanc@redhat.com
    ee_base_reg_password: "{{ controller_credential_container_registry_redhat }}"
    ee_dest_reg: ansible.autodotes.com
    ee_dest_reg_user: hubber
    ee_dest_reg_password: "{{ controller_credential_pah_hubber }}"
- name: "EE Utilities (Destination: Quay)"
  organization: Autodotes
  credential_type: EE Utilities 
  description: used to build execution environments and publish to quay
  inputs:
    ee_base_reg_user: zleblanc@redhat.com
    ee_base_reg_password: "{{ controller_credential_container_registry_redhat }}"
    ee_dest_reg: quay.io/zleblanc
    ee_dest_reg_user: zleblanc
    ee_dest_reg_password: "{{ controller_credential_container_registry_quay }}"
- name: Eve-NG (admin)
  organization: Autodotes 
  credential_type: Eve-NG Credential 
  description: integrate with Eve-NG API
  inputs:
    eve_ng_url: http://192.168.0.3
    eve_ng_user: admin
    eve_ng_password: REPLACE_ME
- name: Execution Environment Builds
  organization: Autodotes
  credential_type: EE Build Credential 
  description: automate building execution environments and publish to private automation hub
  inputs:
    base_registry_password: "{{ controller_credential_container_registry_redhat }}"
    base_registry_username: zleblanc@redhat.com
    ee_ah_host: automation-hub.autodotes.com
    ee_registry_password: REPLACE_ME
    ee_registry_username: admin
    ee_validate_certs: false
## CONTINUE HERE ##
- name: Gitlab - Autodotes
  description: SSH key for GitLab auth
  organization: Autodotes
  credential_type: Source Control
  inputs:
    password: NOT_USED
    ssh_key_data: "{{ controller_credential_gitlab_ssh_key }}"
    username: zjleblanc
- name: Git Role Credential
  description: SSH key for integration with a git role
  organization: Autodotes
  credential_type: Git Role
  inputs:
    git_ssh_key: "{{ controller_credential_ansible_ssh_key }}"
    git_url: git@github.com:zjleblanc/ansible-network-configs.git
- name: Gmail SMTP
  description: ''
  organization: Autodotes
  credential_type: SMTP Server
  inputs:
    email_smtp_from_address: ansible-autodotes@gmail.com
    email_smtp_password: "{{ controller_credential_email_smtp_password }}"
    email_smtp_server: smtp.gmail.com
    email_smtp_server_port: '587'
    email_smtp_username: zjleblanc3@gmail.com
- name: HashiCorp Vault Lookup Integration (root)
  description: ''
  organization: Autodotes
  credential_type: HashiCorp Vault Secret Lookup
  inputs:
    api_version: v1
    cacert: ''
    default_auth_path: ''
    kubernetes_role: ''
    namespace: ''
    role_id: ''
    token: REPLACE_ME
    url: https://vault.autodotes.com:2083
    username: ''
- name: HashiCorp Vault Lookup Plugin (root)
  description: ''
  organization: Autodotes
  credential_type: HashiCorp Vault Credential
  inputs:
    vault_addr: https://vault.autodotes.com:2083
    vault_ca_cert: ''
    vault_namespace: ''
    vault_skip_verify: false
    vault_token: REPLACE_ME
- name: Palo Alto Bastion
  description: Palo Alto Bastion credential for supporting SSH proxy implementation
  organization: Autodotes
  credential_type: SSH Proxy
  inputs:
    ssh_proxy_host: REPLACE_ME
    ssh_proxy_key: "{{ controller_credential_ansible_ssh_key }}"
    ssh_proxy_username: ec2-user
- name: Palo Alto Demo Vault
  description: ''
  organization: Autodotes
  credential_type: Vault
  inputs:
    vault_id: ''
    vault_password: "{{ controller_credential_ansible_vault_password }}"
- name: Palo Alto Firewall (admin)
  description: Palo Alto Firewall administrator credentials compatible with the palaltonetworks.panos
    collection
  organization: Autodotes
  credential_type: Palo Alto Networks Provider
  inputs:
    panos_ip_address: 18.223.60.25
    panos_password: REPLACE_ME
    panos_username: admin
- name: panos-demo-t1-fw
  description: Palo Alto Firewall administrator credentials compatible with the palaltonetworks.panos
    collection
  organization: Autodotes
  credential_type: Palo Alto Networks Provider
  inputs:
    panos_ip_address: 3.23.218.149
    panos_password: REPLACE_ME
    panos_port: ''
    panos_serial_number: ''
    panos_username: admin
- name: Personal Slack Token
  description: Posting to Autodotes Slack organization
  organization: Autodotes
  credential_type: Slack API Token
  inputs:
    raw_slack_token: "{{ controller_credential_slack_token }}"
- name: Private Automation Hub [hubber]
  description: Galaxy content administrator
  organization: Autodotes
  credential_type: Private Automation Hub
  inputs:
    pah_host: ansible.autodotes.com
    pah_password: "{{ controller_credential_pah_hubber }}"
    pah_username: hubber
    pah_verify_ssl: false
- name: Private Automation Hub [builder]
  description: ''
  organization: Autodotes
  credential_type: Private Automation Hub
  inputs:
    pah_host: ansible.autodotes.com
    pah_token: "{{ controller_credential_pah_builder }}"
    pah_username: builder
    pah_verify_ssl: false
- name: Proxmox API
  description: ''
  organization: Autodotes
  credential_type: Proxmox VE Credential
  inputs:
    pve_api_host: nuc.autodotes.com
    pve_api_port: '8006'
    pve_api_token_id: postman
    pve_api_token_secret: "{{ controller_credential_pve_token_postman }}"
    pve_api_user: root@pam
- name: Proxmox Windows Default Credential
  description: ''
  organization: Autodotes
  credential_type: Promox User Credential
  inputs:
    pve_user: Administrator
    pve_user_password: "{{ controller_credential_windows_domain_admin_password }}"
- name: RHSM (zachleblanc)
  description: Red Hat account RHSM
  organization: Autodotes
  credential_type: Red Hat Subscription Manager
  inputs:
    rhsm_password: "{{ controller_credential_redhat_zachleblanc }}"
    rhsm_user: zachleblanc
- name: Satellite (Autodotes)
  description: satellite admin credentials
  organization: Autodotes
  credential_type: Red Hat Satellite 6
  inputs:
    host: https://satellite.autodotes.com
    password: "{{ controller_credential_satellite_autodotes_zach }}"
    username: zach
- name: Satellite Provisioner
  description: ''
  organization: Autodotes
  credential_type: Machine
  inputs:
    become_method: ''
    become_password: REPLACE_ME
    become_username: ''
    password: REPLACE_ME
    username: ansible
- name: Terraform Backend Azure Storage Credential
  description: Terraform backend configuration for Azure storage account in your Azure subscription
  organization: Autodotes
  credential_type: Terraform backend configuration
  inputs:
    configuration: |
      resource_group_name  = "openenv-jmdmt"
      storage_account_name = "zjltfstatemgmtsa"
      container_name       = "tfstate"
      access_key           = "{{ controller_credential_az_tf_backend_key  }}"
- name: Vault Demo Credential
  description: ''
  organization: Autodotes
  credential_type: Vault Demo Credential Type
  inputs:
    vault_demo_password: REPLACE_ME
    vault_demo_username: demo-user
- name: VMWare (ansible)
  description: ''
  organization: Autodotes
  credential_type: Machine
  inputs:
    become_method: ''
    become_username: ''
    ssh_key_data: "{{ controller_credential_ansible_ssh_key }}"
    username: ansible
- name: VMWare Bastion (gf7fr)
  description: bastion host for VMWare sandbox env
  organization: Autodotes
  credential_type: SSH Proxy
  inputs:
    ssh_proxy_host: bastion-gf7fr.gf7fr.dynamic.redhatworkshops.io
    ssh_proxy_key: "{{ controller_credential_ansible_ssh_key }}"
    ssh_proxy_password: "{{ controller_credential_vmware_bastion }}"
    ssh_proxy_username: lab-user
- name: VMWare (gf7fr)
  description: credential for vCenter API
  organization: Autodotes
  credential_type: VMware vCenter
  inputs:
    host: vcsnsx-vc.infra.demo.redhat.com
    password: "{{ controller_credential_vmware_vcenter }}"
    username: sandbox-gf7fr@demo
- name: West ServiceNow (ven07621)
  description: for integrating with ServiceNow using servicenow.itsm collection
  organization: Autodotes
  credential_type: ServiceNow Credential
  inputs:
    snow_client_id: ''
    snow_host: https://ven07621.service-now.com/
    snow_password: "{{ controller_credential_servicenow_ven07621 }}"
    snow_user: zleblanc
- name: Windows Kerberos Credential
  description: ''
  organization: Autodotes
  credential_type: Machine
  inputs:
    become_method: ''
    become_username: ''
    password: "{{ controller_credential_windows_domain_zach_password }}"
    username: zach@AUTODOTES.COM
- name: Windows Server Credential
  description: ''
  organization: Autodotes
  credential_type: Machine
  inputs:
    become_method: ''
    become_username: ''
    password: "{{ controller_credential_windows_domain_admin_password }}"
    username: Administrator
- name: openenv-jmdmt/zjltfstatemgmtsa/tfstate
  description: Terraform backend configuration for Azure storage account in open environment
  organization: Autodotes
  credential_type: Terraform backend configuration
  inputs:
    configuration: |
      resource_group_name  = "openenv-jmdmt"
      storage_account_name = "zjltfstatemgmtsa"
      container_name       = "tfstate"
      access_key           = "{{ controller_credential_az_tf_backend_key  }}"
- name: Red Hat Automation Hub
  description: ''
  organization: Autodotes
  credential_type: Generic Token
  inputs:
    generic_token: "{{ controller_credential_rh_pah_token }}"
- name: Azure RM [openenv-jmdmt]
  description: Service Principal for Azure open env
  organization: Autodotes
  credential_type: Microsoft Azure Resource Manager
  inputs:
    subscription: "{{ controller_credential_az_subscription }}"
    tenant: "{{ controller_credential_az_tenant }}"
    client: "{{ controller_credential_az_client_id }}"
    secret: "{{ controller_credential_az_client_secret }}"
...
