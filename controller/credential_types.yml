# ansible-playbook pb_controller_cac.yml --tags credential_types
---
controller_credential_types:
- name: Terraform Cloud Token
  description: Credential to inject krb5 conf and supply username/password for generating a ticket
  kind: cloud
  inputs:
    fields:
      - id: hcp_hostname
        type: string
        label: Hostname
        default: app.terraform.io
      - id: hcp_organization
        type: string
        label: Organization
      - id: hcp_workspace
        type: string
        label: Workspace
      - id: hcp_token
        type: string
        label: Token
        secret: true
    required:
      - hcp_hostname
      - hcp_token
  injectors:
    file:
      template: !unsafe |-
        {
          "credentials": {
            "{{ hcp_hostname }}": {
              "token": "{{ hcp_token }}"
            }
          }
        }
    env:
      TF_WORKSPACE: !unsafe '{{ hcp_workspace }}'
      TF_CLOUD_HOSTNAME: !unsafe '{{ hcp_hostname }}'
      TF_CLOUD_ORGANIZATION: !unsafe '{{ hcp_organization }}'
      TF_CLI_CONFIG_FILE: !unsafe '{{ tower.filename }}'
- name: Kerberos
  description: Credential to inject krb5 conf and supply username/password for generating a ticket
  kind: cloud
  inputs:
    fields:
      - id: username
        type: string
        label: Username
      - id: password
        type: string
        label: Password
        secret: true
      - id: default_realm
        type: string
        label: Default Realm
      - id: kdc
        type: string
        label: KDC
        help_text: Optional KDC, use only if KDC DNS lookup not working
    required:
      - username
      - password
      - default_realm
  injectors:
    env:
      KRB5_CONFIG: !unsafe '{{ tower.filename }}'
    file:
      template: !unsafe |-
        [libdefaults]
        default_realm = {{ default_realm | upper }}
        dns_canonicalize_hostname = fallback
        dns_lookup_kdc = {% if kdc %}false{% else %}true{% endif %}
        dns_lookup_realm = true
        forwardable = true
        rdns = false
        #udp_preference_limit = 1
        [realms]
        {{ default_realm | upper }} = {
          {% if kdc %}kdc = {{ kdc }}{% endif %}
        }
        [domain_realm]
          {{ default_realm | lower }} = {{ default_realm | upper }}
    extra_vars:
      ansible_user: !unsafe '{{ username }}'
      ansible_password: !unsafe '{{ password }}'
- name: HashiCorp Vault Credential   
  kind: cloud
  description: HashiCorp Vault credential for use with community.hashi_vault collection
  injectors:
    env:
      VAULT_ADDR: !unsafe '{{ vault_addr }}'
      VAULT_CACERT: !unsafe '{{ vault_ca_cert }}'
      VAULT_NAMESPACE: !unsafe '{{ vault_namespace }}'
      VAULT_SKIP_VERIFY: !unsafe '{{ vault_skip_verify }}'
      VAULT_TOKEN: !unsafe '{{ vault_token }}'
  inputs:
    fields:
    - id: vault_addr
      label: Vault Address
      type: string
    - id: vault_namespace
      label: Vault Namespace
      type: string
    - id: vault_token
      label: Vault Token
      secret: true
      type: string
    - id: vault_ca_cert
      label: Vault CA Certificate
      type: string
    - default: false
      id: vault_skip_verify
      label: Skip SSL Verification
      type: boolean
    required:
    - vault_addr
- name: ServiceNow Credential
  description: Credential for use with servicenow.itsm collection
  kind: cloud
  injectors:
    env:
      SN_CLIENT_ID: !unsafe '{{ snow_client_id }}'
      SN_CLIENT_SECRET: !unsafe '{{ snow_client_secret }}'
      SN_HOST: !unsafe '{{ snow_host }}'
      SN_PASSWORD: !unsafe '{{ snow_password }}'
      SN_USERNAME: !unsafe '{{ snow_user }}'
  inputs:
    fields:
    - id: snow_host
      label: ServiceNow Host
      type: string
    - id: snow_user
      label: ServiceNow User
      type: string
    - id: snow_password
      label: ServiceNow User's Password
      secret: true
      type: string
    - id: snow_client_id
      label: ServiceNow Client Id
      type: string
    - id: snow_client_secret
      label: ServiceNow Client Secret
      secret: true
      type: string
    required:
    - snow_host
    - snow_user
    - snow_password
- name: Cloudflare Token
  kind: cloud
  description: 'credential for integration with Cloudflare DNS'
  injectors:
    env:
      CLOUDFLARE_TOKEN: !unsafe '{{ cloudflare_token }}'
  inputs:
    fields:
    - id: cloudflare_token
      label: API Token
      type: string
      secret: true
    required:
    - cloudflare_token
- name: CyberArk Conjur Client
  kind: cloud
  description: 'credential for integration with CyberArk Conjur'
  injectors:
    env:
      CONJUR_ACCOUNT: !unsafe '{{ conjur_account }}'
      CONJUR_APPLIANCE_URL: !unsafe '{{ conjur_appliance_url }}'
      CONJUR_AUTHN_API_KEY: !unsafe '{{ conjur_api_key }}'
      CONJUR_AUTHN_LOGIN: !unsafe '{{ conjur_login }}'
      CONJUR_CERT_FILE: !unsafe '{{ tower.filename }}'
    file:
      template: !unsafe '{{ conjur_cert_file }}'
  inputs:
    fields:
    - id: conjur_account
      label: Account
      type: string
    - id: conjur_appliance_url
      label: Appliance URL
      type: string
    - id: conjur_login
      label: Login
      type: string
    - id: conjur_api_key
      label: API Key
      secret: true
      type: string
    - id: conjur_cert_file
      label: Conjur Certificate
      multiline: true
      type: string
    required:
    - conjur_account
    - conjur_appliance_url
    - conjur_login
    - conjur_api_key
    - conjur_cert_file
- name: Daily Demo Credential
  description: for use with Eric Ames daily demo
  kind: cloud
  injectors:
    extra_vars:
      controller_passwd: !unsafe '{{ controller_passwd }}'
      customer_portal_passwd: !unsafe '{{ customer_portal_passwd }}'
  inputs:
    fields:
    - id: controller_passwd
      label: Controller Password
      secret: true
      type: string
    - id: customer_portal_passwd
      label: Customer Portal Password
      secret: true
      type: string
    required:
    - controller_passwd
    - customer_portal_passwd
- name: Demo CyberArk Conjur Secret
  description: ''
  kind: cloud
  injectors:
    extra_vars:
      conjur_secret: !unsafe '{{ raw_conjur_secret }}'
  inputs:
    fields:
    - id: raw_conjur_secret
      label: Encrypted Secret
      secret: true
      type: string
    required:
    - raw_conjur_secret
- name: Dynatrace
  description: for integration with Dynatrace API
  kind: cloud
  injectors:
    env:
      DYNATRACE_API_TOKEN: !unsafe '{{ dynatrace_api_token }}'
      DT_API_TOKEN: !unsafe '{{ dynatrace_api_token }}'
      DYNATRACE_CLIENT_ID: !unsafe '{{ dynatrace_client_id }}'
      DYNATRACE_CLIENT_SECRET: !unsafe '{{ dynatrace_client_secret }}'
      DYNATRACE_HOST: !unsafe '{{ dynatrace_host }}'
  inputs:
    fields:
    - id: dynatrace_host
      label: Dynatrace Host
      type: string
    - id: dynatrace_client_id
      label: Dynatrace Client Id
      type: string
    - id: dynatrace_client_secret
      label: Dynatrace Client Secret
      secret: true
      type: string
    - id: dynatrace_api_token
      label: Dynatrace API Token
      secret: true
      type: string
    required:
    - dynatrace_host
- name: EE Build Credential
  description: for automation the execution environment build process
  kind: cloud
  injectors:
    extra_vars:
      ah_host: !unsafe '{{ ee_ah_host }}'
      ah_token: !unsafe '{{ ee_ah_token }}'
      ee_base_registry_password: !unsafe '{{ base_registry_password }}'
      ee_base_registry_username: !unsafe '{{ base_registry_username }}'
      ee_registry_password: !unsafe '{{ ee_registry_password }}'
      ee_registry_username: !unsafe '{{ ee_registry_username }}'
      ee_validate_certs: !unsafe '{{ ee_validate_certs }}'
  inputs:
    fields:
    - id: base_registry_username
      label: RH registry Username
      type: string
    - id: base_registry_password
      label: RH registry Password
      secret: true
      type: string
    - id: ee_registry_username
      label: AH registry Username
      type: string
    - id: ee_registry_password
      label: AH registry Password
      secret: true
      type: string
    - id: ee_ah_host
      label: AH Hostname
      type: string
    - id: ee_ah_token
      label: AH Token
      secret: true
      type: string
    - default: false
      id: ee_validate_certs
      label: Validate certs
      type: boolean
    required:
    - base_registry_username
    - base_registry_password
- name: EE Utilities
  description: for use with the execution environment utilities collection
  kind: cloud
  injectors:
    extra_vars:
      ee_base_reg_password: !unsafe '{{ ee_base_reg_password }}'
      ee_base_reg_user: !unsafe '{{ ee_base_reg_user }}'
      ee_dest_reg: !unsafe '{{ ee_dest_reg }}'
      ee_dest_reg_password: !unsafe '{{ ee_dest_reg_password }}'
      ee_dest_reg_user: !unsafe '{{ ee_dest_reg_user }}'
  inputs:
    fields:
    - id: ee_base_reg_user
      label: Base Registry Username
      type: string
    - id: ee_base_reg_password
      label: Base Registry Password
      secret: true
      type: string
    - help_text: 'ex: quay.io/zleblanc'
      id: ee_dest_reg
      label: Destination Registry
      type: string
    - id: ee_dest_reg_user
      label: Destination Registry Username
      type: string
    - id: ee_dest_reg_password
      label: Destination Registry Password
      secret: true
      type: string
    required:
    - ee_base_reg_user
    - ee_base_reg_password
    - ee_dest_reg
    - ee_dest_reg_user
    - ee_dest_reg_password
- name: Eve-NG Credential
  description: for integration with the eve-ng api
  kind: cloud
  injectors:
    extra_vars:
      eve_ng_password: !unsafe '{{ eve_ng_password }}'
      eve_ng_url: !unsafe '{{ eve_ng_url }}'
      eve_ng_user: !unsafe '{{ eve_ng_user }}'
  inputs:
    fields:
    - id: eve_ng_url
      label: Eve-NG URL
      type: string
    - id: eve_ng_user
      label: Eve-NG User
      type: string
    - id: eve_ng_password
      label: Eve-NG Password
      secret: true
      type: string
    required:
    - eve_ng_url
    - eve_ng_user
    - eve_ng_password
- name: Generic Token
  description: super generic token
  kind: cloud
  injectors:
    extra_vars:
      generic_token: !unsafe '{{ generic_token }}'
  inputs:
    fields:
    - id: generic_token
      label: Token
      secret: true
      type: string
    required:
    - token
- name: Git Role
  description: Specifically for use with git role in network-mgmt project
  kind: cloud
  injectors:
    extra_vars:
      git_ssh_key: !unsafe '{{ git_ssh_key }}'
      git_url: !unsafe '{{ git_url }}'
  inputs:
    fields:
    - id: git_url
      label: Git URL
      type: string
    - format: ssh_private_key
      id: git_ssh_key
      label: Git SSH Private Key
      multiline: true
      secret: true
      type: string
    required:
    - git_url
    - git_ssh_key
- name: MSFT AD LDAP Demo
  description: for integrating with an Active Directory server
  kind: cloud
  injectors:
    env:
      MICROSOFT_AD_LDAP_AUTH_PROTOCOL: !unsafe '{{ ldap_auth_protocol | default(''negotiate'',
        true) }}'
      MICROSOFT_AD_LDAP_CA_CERT: !unsafe '{{ ldap_ca_cert }}'
      MICROSOFT_AD_LDAP_CERTIFICATE: !unsafe '{{ ldap_certificate }}'
      MICROSOFT_AD_LDAP_CERTIFICATE_KEY: !unsafe '{{ ldap_certificate_key }}'
      MICROSOFT_AD_LDAP_CERTIFICATE_PASSWORD: !unsafe '{{ ldap_certificate_password }}'
      MICROSOFT_AD_LDAP_CERT_VALIDATION: !unsafe '{{ ldap_cert_validation }}'
      MICROSOFT_AD_LDAP_PASSWORD: !unsafe '{{ ldap_password }}'
      MICROSOFT_AD_LDAP_PORT: !unsafe '{{ ldap_port | default(''389'') }}'
      MICROSOFT_AD_LDAP_SERVER: !unsafe '{{ ldap_server }}'
      MICROSOFT_AD_LDAP_USERNAME: !unsafe '{{ ldap_username }}'
  inputs:
    fields:
    - help_text: The domain controller/server to connect to
      id: ldap_server
      label: LDAP Server
      type: string
    - help_text: Port 389 is used for LDAP and port 686 is used for LDAPS
      id: ldap_port
      label: LDAP Port
      type: string
    - id: ldap_username
      label: LDAP Username
      type: string
    - id: ldap_password
      label: LDAP Password
      secret: true
      type: string
    - choices:
      - simple
      - certificate
      - kerberos
      - negotiate
      - ntlm
      id: ldap_auth_protocol
      label: LDAP Auth Protocol
      type: string
    - choices:
      - always
      - ignore
      - ignore_hostname
      help_text: The certificate validation behaviour when using a TLS connection
      id: ldap_cert_validation
      label: LDAP Cert Validation
      type: string
    - help_text: Can be the path to a CA certificate PEM or DER file, directory of
        PEM certificates, or the CA certificate PEM string that is used for certificate
        validation
      id: ldap_ca_cert
      label: LDAP CA Cert
      type: string
    - help_text: The value can either be a path to a file containing the certificate
        or string of the PEM encoded certificate
      id: ldap_certificate
      label: LDAP Certificate
      type: string
    - help_text: The value can either be a path to a file containing the key in the
        PEM or DER encoded form, or it can be the string of a PEM encoded key
      id: ldap_certificate_key
      label: LDAP Certificate Key
      type: string
    - help_text: The password used to decrypt the certificate key specified by LDAP
        Certificate or LDAP Certificate Key
      id: ldap_certificate_password
      label: LDAP Certificate Password
      secret: true
      type: string
    required:
    - ldap_server
- name: Palo Alto Networks Provider
  description: for use with the paloaltonetworks.panos collection
  kind: cloud
  injectors:
    extra_vars:
      panos_provider:
        ip_address: !unsafe '{{ panos_ip_address }}'
        password: !unsafe '{{ panos_password | default(omit) }}'
        username: !unsafe '{{ panos_username | default(omit) }}'
  inputs:
    fields:
    - help_text: The IP address or hostname of the PAN-OS device being configured.
      id: panos_ip_address
      label: IP Address
      type: string
    - help_text: The port number to connect to the PAN-OS device on.
      id: panos_port
      label: Port
      type: string
    - help_text: The serial number of a firewall to use for targeted commands. If
        ip_address is not a Panorama PAN-OS device, then this param is ignored.
      id: panos_serial_number
      label: Serial Number
      type: string
    - help_text: The username to use for authentication. This is ignored if api_key
        is specified.
      id: panos_username
      label: Username
      type: string
    - help_text: The password to use for authentication. This is ignored if api_key
        is specified.
      id: panos_password
      label: Password
      secret: true
      type: string
    - help_text: The API key to use instead of generating it using username / password.
      id: panos_api_key
      label: API Key
      secret: true
      type: string
    required:
    - panos_ip_address
- name: Private Automation Hub
  description: For integration with the PAH API via ansible.hub collection
  kind: cloud
  injectors:
    env:
      AH_API_TOKEN: !unsafe '{{ pah_token }}'
      AH_HOST: !unsafe '{{ pah_host }}'
      AH_PASSWORD: !unsafe '{{ pah_password }}'
      AH_USERNAME: !unsafe '{{ pah_username }}'
      AH_VERIFY_SSL: !unsafe '{{ pah_verify_ssl }}'
      PAH_HOST: !unsafe '{{ pah_host }}'
      PAH_PASSWORD: !unsafe '{{ pah_password }}'
      PAH_TOKEN: !unsafe '{{ pah_token }}'
      PAH_USERNAME: !unsafe '{{ pah_username }}'
      PAH_VERIFY_SSL: !unsafe '{{ pah_verify_ssl }}'
  inputs:
    fields:
    - id: pah_host
      label: Host
      type: string
    - id: pah_username
      label: Username
      type: string
    - id: pah_password
      label: Password
      secret: true
      type: string
    - id: pah_token
      label: Token
      secret: true
      type: string
    - id: pah_verify_ssl
      label: Verify SSL?
      type: boolean
    required:
    - pah_host
- name: Promox User Credential
  description: Default creds for a Proxmox instance
  kind: cloud
  injectors:
    extra_vars:
      proxmox_default_password: !unsafe '{{ pve_user_password }}'
      proxmox_default_user: !unsafe '{{ pve_user }}'
  inputs:
    fields:
    - id: pve_user
      label: PVE Instance User
      type: string
    - id: pve_user_password
      label: PVE Instance User's Password
      secret: true
      type: string
    required:
    - pve_user
    - pve_user_password
- name: Proxmox VE Credential
  description: Authenticate with a Proxmox VE API
  kind: cloud
  injectors:
    env:
      PROXMOX_HOST: !unsafe '{{ pve_api_host }}'
      PROXMOX_PASSWORD: !unsafe '{{ pve_api_password }}'
      PROXMOX_PORT: !unsafe '{{ pve_api_port }}'
      PROXMOX_USER: !unsafe '{{ pve_api_user }}'
    extra_vars:
      proxmox_api_host: !unsafe '{{ pve_api_host }}'
      proxmox_api_password: !unsafe '{{ pve_api_password }}'
      proxmox_api_token_id: !unsafe '{{ pve_api_token_id }}'
      proxmox_api_token_secret: !unsafe '{{ pve_api_token_secret }}'
      proxmox_api_user: !unsafe '{{ pve_api_user }}'
      pve_api_port: !unsafe '{{ pve_api_port }}'
  inputs:
    fields:
    - id: pve_api_host
      label: Host
      type: string
    - id: pve_api_port
      label: Port
      type: string
    - id: pve_api_user
      label: User
      type: string
    - id: pve_api_token_id
      label: Token Id
      type: string
    - id: pve_api_token_secret
      label: Token Secret
      secret: true
      type: string
    - id: pve_api_password
      label: Password
      secret: true
      type: string
    required:
    - pve_api_host
    - pve_api_user
- name: Red Hat Subscription Manager
  description: for integration with Red Hat Subscription Manager
  kind: cloud
  injectors:
    extra_vars:
      customer_portal_password: !unsafe '{{ rhsm_password }}'
      customer_portal_username: !unsafe '{{ rhsm_user }}'
      rhsm_password: !unsafe '{{ rhsm_password }}'
      rhsm_user: !unsafe '{{ rhsm_user }}'
  inputs:
    fields:
    - id: rhsm_user
      label: RHSM Username
      type: string
    - id: rhsm_password
      label: RHSM Password
      secret: true
      type: string
    required:
    - rhsm_user
    - rhsm_password
- name: Slack API Token
  description: Slack API Token Credential for leveraging workspace APIs
  kind: cloud
  injectors:
    extra_vars:
      slack_token: !unsafe '{{ raw_slack_token }}'
  inputs:
    fields:
    - id: raw_slack_token
      label: Encrypted Secret
      secret: true
      type: string
    required:
    - raw_slack_token
- name: SMTP Callback
  description: For use with zjleblanc.utils callback plugins for sending e-mail notifications
  kind: cloud
  inputs:
    fields:
    - help_text: Example - smtp.gmail.com
      id: email_smtp_server
      label: Server
      type: string
    - help_text: Example - 587
      id: email_smtp_server_port
      label: Port
      type: string
    - help_text: Username to authenticate with SMTP server
      id: email_smtp_username
      label: Username
      type: string
    - help_text: Password to authenticate with SMTP server
      id: email_smtp_password
      label: Password
      secret: true
      type: string
    - help_text: Example - sender@gmail.com
      id: email_smtp_from_address
      label: From Address
      type: string
    - help_text: Example - recepient@gmail.com
      id: email_smtp_to_address
      label: To Address
      type: string
    required:
    - email_smtp_server
    - email_smtp_server_port
    - email_smtp_username
    - email_smtp_password
    - email_smtp_from_address
    - email_smtp_to_address
  injectors:
    env:
      SMTP_SERVER: !unsafe '{{ email_smtp_server }}'
      SMTP_PORT: !unsafe '{{ email_smtp_server_port }}'
      SMTP_USER: !unsafe '{{ email_smtp_username }}'
      SMTP_PASSWORD: !unsafe '{{ email_smtp_password }}'
      SMTP_EMAIL_FROM: !unsafe '{{ email_smtp_from_address }}'
      SMTP_EMAIL_TO: !unsafe '{{ email_smtp_to_address }}'
- name: SMTP Server
  description: For use with community.general.mail module to send e-mail notifications
  kind: cloud
  injectors:
    extra_vars:
      MAILHOST: !unsafe '{{ email_smtp_server }}'
      MAILHOST_PASSWORD: !unsafe '{{ email_smtp_password }}'
      MAILHOST_PORT: !unsafe '{{ email_smtp_server_port }}'
      MAILHOST_USERNAME: !unsafe '{{ email_smtp_username }}'
      email_smtp_from_address: !unsafe '{{ email_smtp_from_address }}'
      email_smtp_password: !unsafe '{{ email_smtp_password }}'
      email_smtp_server: !unsafe '{{ email_smtp_server }}'
      email_smtp_server_port: !unsafe '{{ email_smtp_server_port }}'
      email_smtp_username: !unsafe '{{ email_smtp_username }}'
      smtp_password: !unsafe '{{ email_smtp_password }}'
      smtp_port: !unsafe '{{ email_smtp_server_port }}'
      smtp_username: !unsafe '{{ email_smtp_username }}'
      smtpserver: !unsafe '{{ email_smtp_server }}'
  inputs:
    fields:
    - help_text: Example - smtp.gmail.com
      id: email_smtp_server
      label: Server
      type: string
    - help_text: Example - 587
      id: email_smtp_server_port
      label: Port
      type: string
    - help_text: Username to authenticate with SMTP server
      id: email_smtp_username
      label: Username
      type: string
    - help_text: Password to authenticate with SMTP server
      id: email_smtp_password
      label: Password
      secret: true
      type: string
    - help_text: Example - sender@gmail.com
      id: email_smtp_from_address
      label: From Address
      type: string
    required:
    - email_smtp_server
    - email_smtp_server_port
    - email_smtp_username
    - email_smtp_password
- name: SQL Server Service Accounts
  description: To connect and run queries against a SQL Server instance
  kind: cloud
  injectors:
    extra_vars:
      mssql_agentsvc_account: !unsafe '{{ mssql_agentsvc_account }}'
      mssql_agentsvc_account_pass: !unsafe '{{ mssql_agentsvc_account_pass }}'
      mssql_assvc_account: !unsafe '{{ mssql_assvc_account }}'
      mssql_assvc_account_pass: !unsafe '{{ mssql_assvc_account_pass }}'
      mssql_sqlsvc_account: !unsafe '{{ mssql_sqlsvc_account }}'
      mssql_sqlsvc_account_pass: !unsafe '{{ mssql_sqlsvc_account_pass }}'
  inputs:
    fields:
    - id: mssql_sqlsvc_account
      label: SQL Service Account
      type: string
    - id: mssql_sqlsvc_account_pass
      label: SQL Service Account Password
      secret: true
      type: string
    - id: mssql_agentsvc_account
      label: SQL Agent Account
      type: string
    - id: mssql_agentsvc_account_pass
      label: SQL Agent Account Password
      secret: true
      type: string
    - id: mssql_assvc_account
      label: SQL Analysis Services Account
      type: string
    - id: mssql_assvc_account_pass
      label: SQL Analysis Services Account Password
      secret: true
      type: string
    required:
    - mssql_sqlsvc_account
    - mssql_sqlsvc_account_pass
    - mssql_agentsvc_account
    - mssql_agentsvc_account_pass
    - mssql_assvc_account
    - mssql_assvc_account_pass
- name: SSH Proxy
  description: for connecting to a managed node through a bastion host
  kind: cloud
  injectors:
    env:
      SSH_PROXY_KEY: !unsafe '{{ tower.filename }}'
    extra_vars:
      ssh_proxy_host: !unsafe '{{ ssh_proxy_host }}'
      ssh_proxy_password: !unsafe '{{ ssh_proxy_password }}'
      ssh_proxy_username: !unsafe '{{ ssh_proxy_username }}'
    file:
      template: !unsafe '{{ ssh_proxy_key }}'
  inputs:
    fields:
    - id: ssh_proxy_username
      label: SSH Proxy Username
      type: string
    - id: ssh_proxy_password
      label: SSH Proxy Password
      secret: true
      type: string
    - id: ssh_proxy_host
      label: SSH Proxy Host
      type: string
    - format: ssh_private_key
      id: ssh_proxy_key
      label: SSH Proxy Private Key
      multiline: true
      secret: true
      type: string
    required:
    - ssh_proxy_username
    - ssh_proxy_host
- name: Terraform Cloud API
  description: for integration with the Tf Cloud API
  kind: cloud
  injectors:
    extra_vars:
      tf_api_token: !unsafe '{{ tf_api_token }}'
      tf_base_url: !unsafe '{{ tf_base_url }}'
      tf_organization: !unsafe '{{ tf_organization }}'
      tf_workspace: !unsafe '{{ tf_workspace }}'
  inputs:
    fields:
    - id: tf_base_url
      label: Tf Cloud API Host
      type: string
    - id: tf_api_token
      label: Tf Cloud API Token
      secret: true
      type: string
    - id: tf_organization
      label: Tf Organization
      type: string
    - id: tf_workspace
      label: Tf Worksapce
      type: string
    required:
    - tf_base_url
    - tf_api_token
- name: Vault Demo Credential Type
  description: For integration with HashiCorp Vault
  kind: cloud
  injectors:
    env:
      VAULT_DEMO_PASSWORD: !unsafe '{{ vault_demo_password }}'
      VAULT_DEMO_USER: !unsafe '{{ vault_demo_username }}'
    extra_vars:
      vault_demo_password: !unsafe '{{ vault_demo_password }}'
      vault_demo_user: !unsafe '{{ vault_demo_username }}'
  inputs:
    fields:
    - id: vault_demo_username
      label: Username
      type: string
    - id: vault_demo_password
      label: Password
      secret: true
      type: string
    required:
    - vault_demo_username
    - vault_demo_password
- name: Windows Domain Administrator
  description: Credentials for a windows domain administrator
  kind: cloud
  injectors:
    extra_vars:
      win_domain: !unsafe '{{ domain }}'
      win_domain_admin: !unsafe '{{ admin_account }}'
      win_domain_admin_password: !unsafe '{{ admin_password }}'
  inputs:
    fields:
    - id: domain
      label: Domain Name
      type: string
    - id: admin_account
      label: Administrator Account
      type: string
    - id: admin_password
      label: Administrator Password
      secret: true
      type: string
    required:
    - domain
    - admin_account
    - admin_password
...
